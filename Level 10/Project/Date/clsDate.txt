#include <iostream>
#include <vector>

using namespace std;


class clsDate
{
    private:
    short _Day=0;
    short _Month=0;
    short _Year=0;
    
    public:
    short getDay()
    {return _Day;}
    short getMonth()
    {return _Month;}
    short getYear()
    {return _Year;}
    clsDate()
    {
        //data
        
    }
    clsDate(string Date)
    {
        vector<string> date=Split(Date,"/");
        _Day=stoi(date[0]);
        _Month=stoi(date[1]);
        _Year=stoi(date[2]);
    }
    clsDate(short days,short month,short year)
    {
        _Day=days;
        _Month=month;
        _Year=year;
    }
  
    
    static vector<string> Split(string S1, string Delim)
     {

      vector<string> vString;

      short pos = 0;
      string sWord; // define a string variable  

      // use find() function to get the position of the delimiters  
      while ((pos = S1.find(Delim)) != std::string::npos)
      {
          sWord = S1.substr(0, pos); // store the word   
          if (sWord != "")
          {
              vString.push_back(sWord);
          }

          S1.erase(0, pos + Delim.length());  /* erase() until positon and move to next word. */
      }
    if(S1!="")
    {
        vString.push_back(S1);
    }
      return vString;
    }
    
  
  
    short NumberofDays(short mon,short Year)
     {
    if(mon>12 || mon<1)
    return 0;
    
    int NumberofDays[13]={0,31,29,31,30,31,30,31,31,30,31,30,31};
    
    return (mon==2)? (IsLeapYear(Year)?29:28) :NumberofDays[mon];
    }  
    
    static bool IsLeapYear(short Year)
    {   
        return ( (Year%100 != 0 && Year%4==0 ) || (Year%400==0) );
        // if year is divisible by 4 AND not divisible by 100
        // OR if year is divisible by 400
        // then it is a leap year
    }
    bool IsLeapYear()
    {
        return IsLeapYear(_Year);
}

    
    bool IsValid ()
    {
            if(_Day>31 ||_Day<0)
            return false;
            
            if(_Month>12|| _Month<0)
            return false;
            
            if(_Month==2)
            {
                if(IsLeapYear(_Year))
                {
                    if(_Day>29)
                    return false;
                }
               else 
               {
                   if(_Day>28)
                   return false;
               }
            }
            
        short  NumberInMonth=  NumberofDays(_Month,_Year);
        if(_Day>NumberInMonth)
         return false;
    
        
        return true ;
    }
   
   
   
    short DayOfWeekOrder(short Day, short Month, short Year)
    { short a, y, m; 
        a = (14 - Month) / 12;
        y = Year - a;    
        m = Month + (12 * a) - 2;
        // Gregorian:
        //0:sun, 1:Mon, 2:Tue...etc
    return (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7; 
        
}

   
   
    string DayShortName(int Day)
    {
        string arr[7]={"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};
        return arr[Day];
}
    string MonthShortName(int Day)
    {
        string arr[13]={"","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
        return arr[Day];
    }
 
     void PrintMonthCalender(short Month,short Year)
    {
        short current=DayOfWeekOrder(1,Month,Year);
        short NumberofDaysss=NumberofDays(Month,Year);
        
        printf("_________________%s________________\n",MonthShortName(Month).c_str());
        printf("  Sun  Mon  Tus  Wed  Thu  Fri  Sat\n");
        int i=0;
        for(i=0;i<current;i++)
        {
            cout<<"     ";
        }
        for(int j=1;j<=NumberofDaysss;j++)
        {
            printf("%5d",j);
            if(++i==7)
            {   i=0;
                cout<<"\n";
            }
        }
        cout<<endl;
    }

    void PrintMonthCalender()
    {
    PrintMonthCalender(_Month,_Year);
}


    void printAllClaender(short Year)
    {   
        printf("  Caalender of [ %d ]\n",Year);
        for(short i=1;i<=12;i++)
        {
            PrintMonthCalender(i,Year);
            printf("\n\n");
        }
}
    void printAllClaender( )
    {
        return printAllClaender(_Year);
    }



    enum enDateCompare {Before=-1,Equal=0,After=1};

  static  bool IsDate1BeforDate2(clsDate Date1 ,clsDate Date2)
    {
        return (Date1.getYear()>Date2.getYear())?true: (Date1.getYear()==Date2.getYear())?(Date1.getMonth()>Date2.getMonth())?true: (Date1.getMonth()==Date2.getMonth())? Date1.getDay()>Date2.getDay() :false:false;
    }
  static  bool IDate1EqualDate2(clsDate Date1 ,clsDate Date2)
    {
         return (Date1.getYear()==Date2.getYear())? (Date1.getMonth()==Date2.getMonth())?(Date1.getDay()==Date2.getDay())?true:false :false :false;
    }

   static bool IsDate1AfterDate2(clsDate Date1,clsDate Date2)
    {
        return (!(IsDate1BeforDate2(Date1,Date2))&& !(IDate1EqualDate2(Date1,Date2)) )?true:false;
    }
    enDateCompare Compare(clsDate Date1,clsDate Date2)
    {
        if(IDate1EqualDate2(Date1,Date2))
        return enDateCompare::Equal;
        
          if(IsDate1BeforDate2(Date1,Date2))
        return enDateCompare::Before;
        
        return enDateCompare::After;
    }
    
    bool IsDate1BeforDate2(clsDate Date2)
    {
        return IsDate1BeforDate2(*this,Date2);
    }
      bool IsDate1AfterDate2(clsDate Date2)
    {
        return IsDate1AfterDate2(*this,Date2);
    }

     bool IDate1EqualDate2(clsDate Date2)
    {
        return IDate1EqualDate2(*this,Date2);
    }








    void Print()
    {
        cout<<_Day<<"/"<<_Month<<"/"<<_Year<<endl;    
    }






};

int main() {
    
    
     clsDate Date2("11/2/2000");
   Date2.Print();
  

    return 0;
}
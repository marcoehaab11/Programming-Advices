#include <iostream>
using namespace std;

struct strDate
{
    short Year;
    short Month;
    short Day;
};
struct strPeriod
{
    strDate StartPeriod;
    strDate EndPeriod;
};
enum enDateCompare {Before=-1,Equal=0,After=1};


bool IsLeapYear(short Year)
{   
    return ( (Year%100 != 0 && Year%4==0 ) || (Year%400==0) );
    // if year is divisible by 4 AND not divisible by 100
    // OR if year is divisible by 400
    // then it is a leap year
}
int NumberofDays(short mon,short Year)
{
    if(mon>12 || mon<1)
    return 0;
    
    int NumberofDays[13]={0,31,29,31,30,31,30,31,31,30,31,30,31};
    
    return (mon==2)? (IsLeapYear(Year)?29:28) :NumberofDays[mon];
}

//Overload function
short DayOfWeekOrder(short Day, short Month, short Year)
{ short a, y, m; 
    a = (14 - Month) / 12;
    y = Year - a;    
    m = Month + (12 * a) - 2;
    // Gregorian:
    //0:sun, 1:Mon, 2:Tue...etc
return (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7; 
    
}
short DayOfWeekOrder(strDate Date)
{
    return DayOfWeekOrder(Date.Day,Date.Month,Date.Year);
}

int NumberOfDaysFromBegining(short Day,short Month, short Year)
{   short counter=0;
   
        for(int i=1;i<Month;i++)
        { 
            counter+=NumberofDays(i,Year);
        }
        return Day+counter;
    
    
}

short NumberOfDaysInMonth(short Month,short Year )
{
    if(Month<1||Month>12)
    return 0;
    
    int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : days[Month - 1]; 
}
bool IsLastDayInMonth(strDate Date) 
{ 
    return (Date.Day == NumberOfDaysInMonth(Date.Month, Date.Year));
} 
bool IsLastMonthInYear(short Month) 
{ 
    return (Month == 12);
} 


strDate IncreaseDateByOneDay(strDate Date)
{
    if(IsLastDayInMonth(Date))
    {
        if(IsLastMonthInYear(Date.Month))
        {
            Date.Month=1;
            Date.Day=1;
            Date.Year++;
        }
        else 
        {
            Date.Day=1;
            Date.Month++;
        }
    }
    else 
    {
        Date.Day++;
    }
    
    return Date;    
}

bool IsDate1BeforDate2(strDate Date2 ,strDate Date1)
{
    return (Date1.Year>Date2.Year)?true: (Date1.Year==Date2.Year)?(Date1.Month>Date2.Month)?true: (Date1.Month==Date2.Month)? Date1.Day>Date2.Day :false:false;
}
bool IDate1EqualDate2(strDate Date1 ,strDate Date2)
{
     return (Date1.Year==Date2.Year)? (Date1.Month==Date2.Month)?(Date1.Day==Date2.Day)?true:false :false :false;
}
bool IsDate1AfterDate2(strDate Date1,strDate Date2)
{
    return (!(IsDate1BeforDate2(Date1,Date2))&& !(IDate1EqualDate2(Date1,Date2)) )?true:false;
}
enDateCompare Compare(strDate Date1,strDate Date2)
{
    if(IDate1EqualDate2(Date1,Date2))
    return enDateCompare::Equal;
    
      if(IsDate1BeforDate2(Date1,Date2))
    return enDateCompare::Before;
    
    return enDateCompare::After;
}
int DiffBetweenDates(strDate Date1,strDate Date2,bool InCludeEndDay=false)
{   
    int Days=0;
    while(IsDate1BeforDate2(Date1,Date2))
    {
        Days++;
        Date1=IncreaseDateByOneDay(Date1);
    }
    return InCludeEndDay?++Days:Days;

}
int PeriodLenghtInDays(strPeriod p1,bool end=false)
{
    return DiffBetweenDates(p1.StartPeriod,p1.EndPeriod,end);
}
bool IsdateInPeriod (strDate Date ,strPeriod p)
{
    return !(Compare(Date,p.StartPeriod)==enDateCompare::Before
    ||
    Compare(Date,p.EndPeriod)==enDateCompare::After);
}

bool IsPeriodOverLap(strPeriod p1, strPeriod p2)
{
    if( !(Compare(p2.EndPeriod,p1.StartPeriod) ==enDateCompare::Before
    ||
    Compare(p2.StartPeriod,p1.EndPeriod) ==enDateCompare::After
    ))
    {
    return true;
    
    }
    else{ 
    return false;
    }
}
int CountOverLapDays(strPeriod p1,strPeriod p2)
{
    int P1Lenght =PeriodLenghtInDays(p1,true);
    int P2Lenght =PeriodLenghtInDays(p2,true);
    int OverLap=0;
    
    
    if(!(IsPeriodOverLap(p1,p2)))
    { return 0;}
    
    if(P2Lenght>P1Lenght)
    {
        while (IsDate1BeforDate2(p1.StartPeriod,p1.EndPeriod))
        {
           if(IsdateInPeriod(p1.StartPeriod,p2))
           { OverLap++;}
           p1.StartPeriod=IncreaseDateByOneDay(p1.StartPeriod);
        }
    }
    else
    {
        while(IsDate1BeforDate2(p2.StartPeriod,p2.EndPeriod))
        {
            if(IsdateInPeriod(p2.StartPeriod,p1))
            {OverLap++;}
            
            p2.StartPeriod=IncreaseDateByOneDay(p2.StartPeriod);
        }
    }
    return OverLap;
    
}



short ReadYear()
{   short year;
    cout<<"Enter The Year ? ";
    cin>>year;
    return year;
}
short ReadMon()
{   short Mon;
    cout<<"\nEnter The Mon ? ";
    cin>>Mon;
    return Mon;
}
short ReadDay()
{   short Day;
    cout<<"\nEnter The Day? ";
    cin>>Day;
    return Day;
}

strDate ReadFullDate()
{
    strDate Date;
    
     Date.Day=ReadDay();
     Date.Month=ReadMon();
     Date.Year=ReadYear();
    
   
    
    return Date;
}

strPeriod ReadPeriod()
{
    strPeriod Period;
    cout<<"Start Period :\n";
    Period.StartPeriod=ReadFullDate();
    cout<<"End  Period :\n";
    Period.EndPeriod=ReadFullDate();
    return Period;
}

int main() {
    
strPeriod p1,p2;

p1=ReadPeriod();
p2=ReadPeriod();

cout<<CountOverLapDays(p1,p2);



    return 0;
}
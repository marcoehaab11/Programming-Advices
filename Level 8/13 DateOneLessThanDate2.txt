#include <iostream>
#include <string>
using namespace std;

struct strDate
{
    short Year;
    short Month;
    short Day;
};

bool IsLeapYear(short Year)
{   
    return ( (Year%100 != 0 && Year%4==0 ) || (Year%400==0) );
    // if year is divisible by 4 AND not divisible by 100
    // OR if year is divisible by 400
    // then it is a leap year
}
int NumberofDays(short mon,short Year)
{
    if(mon>12 || mon<1)
    return 0;
    
    int NumberofDays[13]={0,31,29,31,30,31,30,31,31,30,31,30,31};
    
    return (mon==2)? (IsLeapYear(Year)?29:28) :NumberofDays[mon];
}

short DayOfWeekOrder(short Day, short Month, short Year)
{ short a, y, m; 
    a = (14 - Month) / 12;
    y = Year - a;    
    m = Month + (12 * a) - 2;
    // Gregorian:
    //0:sun, 1:Mon, 2:Tue...etc
return (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7; 
    
}

string DayShortName(int Day)
{
    string arr[7]={"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};
    return arr[Day];
}

string MonthShortName(int Day)
{
    string arr[13]={"","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
    return arr[Day];
}

int NumberOfDaysFromBegining(short Day,short Month, short Year)
{   short counter=0;
   
        for(int i=1;i<Month;i++)
        { 
            counter+=NumberofDays(i,Year);
        }
        return Day+counter;
    
    
}

strDate GetDateFromOrderInYear(short GetDateFromOrderInYear ,short Year)
{
    strDate Date;
    
    short ReminDays=GetDateFromOrderInYear;
    
    Date.Year=Year;
    Date.Month=1;
    while(true)
    {  
        short Mon=NumberofDays(Date.Month,Year);
     
        if(ReminDays>Mon)
        {
            ReminDays -=Mon;
            Date.Month++;
            
            if(Date.Month>12)
            {
                Date.Month=1;
                Date.Year++;
            }
        }
        else
        {
            Date.Day=ReminDays;
            break;
        }
    }
    return Date;
    
}
bool IsDateOneBeforDateTwo(strDate Date1 ,strDate Date2)
{
    return NumberOfDaysFromBegining(Date1.Day,Date1.Month,Date1.Year)<NumberOfDaysFromBegining(Date2.Day,Date2.Month,Date2.Year);
}
strDate AddDays(short OldDays ,short NewDays,short Year)
{
    short AllDays =NewDays+OldDays;
    strDate NewDate=GetDateFromOrderInYear(AllDays,Year);
    return NewDate;
}

short ReadYear()
{   short year;
    cout<<"Enter The Year?\n";
    cin>>year;
    return year;
}
short ReadMon()
{   short Mon;
    cout<<"\nEnter The Mon\n";
    cin>>Mon;
    return Mon;
}
short ReadDay()
{   short Day;
    cout<<"\nEnter The Day?\n";
    cin>>Day;
    return Day;
}
short ReadAddDays()
{
     short Day;
    cout<<"\nHow many Days to Add ?\n";
    cin>>Day;
    return Day;
}
strDate ReadFullDate()
{
    strDate Date;
    cout<<"Enter Year ? ";
    cin>>Date.Year;
    cout<<"Enter Month ? ";
    cin>>Date.Month;
    cout<<"Enter Day ? ";
    cin>>Date.Day;
    return Date;
}

int main() {
    
    strDate Date1 =ReadFullDate();
    strDate Date2 =ReadFullDate();
    
    if(IsDateOneBeforDateTwo(Date1,Date2))
    {
        cout<<"\n Yes Date 1 less Than Date 2";
    }
    else 
    {
        cout<<"\n No , Date 1 NOt less Than Date 2";
    }
    return 0;
}

or
bool IsDate1BeforeDate2(stDateDate1, stDateDate2) { return  (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false); } 
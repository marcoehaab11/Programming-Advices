#include <iostream>
#include <string>
using namespace std;

struct strDate
{
    short Year;
    short Month;
    short Day;
};

bool IsLeapYear(short Year)
{   
    return ( (Year%100 != 0 && Year%4==0 ) || (Year%400==0) );
    // if year is divisible by 4 AND not divisible by 100
    // OR if year is divisible by 400
    // then it is a leap year
}
int NumberofDays(short mon,short Year)
{
    if(mon>12 || mon<1)
    return 0;
    
    int NumberofDays[13]={0,31,29,31,30,31,30,31,31,30,31,30,31};
    
    return (mon==2)? (IsLeapYear(Year)?29:28) :NumberofDays[mon];
}

//Overload function
short DayOfWeekOrder(short Day, short Month, short Year)
{ short a, y, m; 
    a = (14 - Month) / 12;
    y = Year - a;    
    m = Month + (12 * a) - 2;
    // Gregorian:
    //0:sun, 1:Mon, 2:Tue...etc
return (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7; 
    
}
short DayOfWeekOrder(strDate Date)
{
    return DayOfWeekOrder(Date.Day,Date.Month,Date.Year);
}

int NumberOfDaysFromBegining(short Day,short Month, short Year)
{   short counter=0;
   
        for(int i=1;i<Month;i++)
        { 
            counter+=NumberofDays(i,Year);
        }
        return Day+counter;
    
    
}
int DiffBetweenDates(strDate Date1,strDate Date2)
{   int Year =Date1.Year;

    int  Date1Tall=NumberOfDaysFromBegining(Date1.Day,Date1.Month,Date1.Year);
    int  Date2Tall=NumberOfDaysFromBegining(Date2.Day,Date2.Month,Year);
    
    return Date2Tall-Date1Tall;
}
string DayShortName(int Day)
{
    string arr[7]={"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};
    return arr[Day];
}

short  IsEndOfWeek(strDate Date)
{   //end of week is saturday
    return ( DayOfWeekOrder(Date)==6 );
}
short  IsWeekEnd(strDate Date)
{   //WeekEnd are Friday or Saturday
    short Number=DayOfWeekOrder(Date.Day,Date.Month,Date.Year); 
    return  (Number==5)||(Number==6);
}
short IsBusinessDay(strDate Date)
{
    return !(IsWeekEnd (Date) );
}
short DaysUntilTheEndOfWeek(strDate Date)
{
    return 6-DayOfWeekOrder(Date);
}
short DaysUntilTheEndOfMonth(strDate Date)
{
    strDate EndOfMonth;
    EndOfMonth.Day=NumberofDays(Date.Month,Date.Year);
    EndOfMonth.Month=Date.Month;
    EndOfMonth.Year=Date.Year;
    return DiffBetweenDates(Date,EndOfMonth);
}
short DaysUntilTheEndOfYear(strDate Date)
{
    strDate EndOfYear;
    EndOfYear.Day=31;
    EndOfYear.Month=12;
    EndOfYear.Year=Date.Year;
    return DiffBetweenDates(Date,EndOfYear);
}


short ReadYear()
{   short year;
    cout<<"Enter The Year?\n";
    cin>>year;
    return year;
}
short ReadMon()
{   short Mon;
    cout<<"\nEnter The Mon\n";
    cin>>Mon;
    return Mon;
}
short ReadDay()
{   short Day;
    cout<<"\nEnter The Day?\n";
    cin>>Day;
    return Day;
}

strDate ReadFullDate()
{
    strDate Date;
    
     Date.Day=ReadDay();
     Date.Month=ReadMon();
     Date.Year=ReadYear();
    
   
    
    return Date;
}

int main() {
    
strDate Date1 = ReadFullDate(); 
cout << "\nToday is " << DayShortName(DayOfWeekOrder(Date1)) << " , "        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;
//--------------------- 
cout << "\nIs it End of Week?\n";
if (IsEndOfWeek(Date1))  
cout << "Yes it is Saturday, it's of Week.";
else     
cout << "No it's Not end of week.";
//---------------------   
cout << "\n\nIs it Weekend?\n";
if (IsWeekEnd(Date1))   
cout << "Yes it is a week end."; else   
cout << "No today is " << DayShortName(DayOfWeekOrder(Date1)) << ", Not a weekend.";
//---------------------   
cout << "\n\nIs it Business Day?\n"; 
if (IsBusinessDay(Date1)) 
cout << "Yes it is a business day.";
else cout << "No it is NOT a business day.";
//---------------------  
cout << "\n\nDays until end of week : " << DaysUntilTheEndOfWeek(Date1) << " Day(s).";
//---------------------   
cout << "\nDays until end of month : "<< DaysUntilTheEndOfMonth(Date1) << " Day(s)."; 
//---------------------  
cout << "\nDays until end of year : " << DaysUntilTheEndOfYear(Date1) << " Day(s)."; 


    return 0;
}